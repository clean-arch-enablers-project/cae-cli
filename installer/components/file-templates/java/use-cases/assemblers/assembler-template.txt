package {{GroupId:SNAKE}}.{{ArtifactId:SNAKE}}.assemblers.use_cases.{{UseCaseName:SNAKE}};

import com.cae.initializers.Lazy;
import com.cae.use_cases.assemblers.UseCaseAssembler;
import {{GroupId:SNAKE}}.{{ArtifactId:SNAKE}}.core.use_cases.{{UseCaseName:SNAKE}}.{{UseCaseName:PASCAL}}UseCase;
import {{GroupId:SNAKE}}.{{ArtifactId:SNAKE}}.core.use_cases.{{UseCaseName:SNAKE}}.implementations.{{UseCaseName:PASCAL}}UseCaseImplementation;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

/**
 * This class creates a singleton object for the {{UseCaseName:PASCAL}}UseCase class.
 * You can use this class to access the instance of this use case anywhere.
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class {{UseCaseName:PASCAL}}UseCaseAssembler implements UseCaseAssembler<{{UseCaseName:PASCAL}}UseCase>{

    public static final {{UseCaseName:PASCAL}}UseCaseAssembler SINGLETON_ASSEMBLER = new {{UseCaseName:PASCAL}}UseCaseAssembler();

    public static final Lazy<{{UseCaseName:PASCAL}}UseCase> V1 = Lazy.loadingOf({{UseCaseName:PASCAL}}UseCaseImplementation::new);

    @Override
    public Lazy<{{UseCaseName:PASCAL}}UseCase> getDefaultAssembledInstance(){
        return V1;
    }
}